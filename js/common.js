// Generated by CoffeeScript 1.10.0
var commonFn, config, extraData;

config = {
  domain: 'https://www.tfrental.com/parse',
  appId: 'ParseExampleApplication',
  javascriptKey: 'JsecXZ5jk83EaQkBJ2Bg7kb',
  qiniuDomain: 'http://7xum8i.com1.z0.glb.clouddn.com/',
  frontEndUrl: 'https://www.tfrental.com/'
};

extraData = {
  amenitiesType: ['基础设施', '周边设施', '增值服务', '其他便利设施']
};

commonFn = {
  stopBubble: function(e) {
    if (e && e.stopPropagation) {
      e.stopPropagation();
    } else {
      window.event.cancelBubble = true;
    }
  },
  stopDefault: function(e) {
    if (e && e.preventDefault) {
      e.preventDefault();
    } else {
      window.event.returnValue = false;
    }
    return false;
  },
  getScript: function(url) {
    $.ajax({
      url: url,
      dataType: 'script',
      async: false
    });
  },
  urlParamToObj: function() {
    var fn, item, j, len1, p, sear, u;
    if (location.search) {
      u = location.search;
    } else {
      u = location.href;
      u = u.slice(0, u.indexOf("#"));
    }
    p = {};
    if (-1 !== u.indexOf("?")) {
      sear = u.slice(u.indexOf("?") + 1).split("&");
      fn = function(item) {
        var s;
        s = item.split("=");
        return p[s[0]] = s[1];
      };
      for (j = 0, len1 = sear.length; j < len1; j++) {
        item = sear[j];
        fn(item);
      }
    }
    return p;
  },

  /**
   * Function for transfer parse's Object to a plain object
   * @param {object} data The city id in user's data
   * @param {string} inc The included data witch need to operate
   * @return {object} Plain object
   * @example
   * transferData(data,"inc1 inc2 inc3")
   */
  transferData: function(data, inc) {
    var DataRes, arr, mainPlainObj;
    arr = [];
    if (inc) {
      arr = inc.split(" ");
    }
    if (_.isObject(data)) {
      if (Array.isArray(data)) {
        DataRes = [];
        _(data.forEach(function(mainItem) {
          var mainPlainObj;
          mainPlainObj = mainItem.toJSON();
          _(arr.forEach(function(incItem) {
            var find, incPlainObj;
            find = _.keys(mainPlainObj);
            if (find.indexOf(incItem) !== -1) {
              incPlainObj = mainItem.get(incItem).toJSON();
              return mainPlainObj[incItem] = incPlainObj;
            }
          }));
          return DataRes.push(mainPlainObj);
        }));
        if (DataRes.length > 0) {
          return DataRes;
        } else {
          return false;
        }
      } else {
        mainPlainObj = data.toJSON();
        _(arr.forEach(function(incItem) {
          var find, incPlainObj;
          find = _.keys(mainPlainObj);
          if (find.indexOf(incItem) !== -1) {
            incPlainObj = data.get(incItem).toJSON();
            return mainPlainObj[incItem] = incPlainObj;
          }
        }));
        return mainPlainObj;
      }
    } else {
      return '需要转换的对象并不是array或object';
    }
  },
  hbsRender: function(selecter, hbs, dataJSON, callback, ext) {
    var callbackRes, dataRes, extRes;
    extRes = '.hbs';
    dataRes = {};
    callbackRes = function() {
      return console.log(hbs + " 渲染完成");
    };
    if (ext) {
      extRes = ext;
    }
    if (dataJSON) {
      dataRes = dataJSON;
    }
    if (callback) {
      callbackRes = callback;
    }
    return $(selecter).loadFromTemplate({
      template: hbs,
      data: dataRes,
      callback: callbackRes(),
      extension: extRes
    });
  },
  qiniuFn: function() {
    return Parse.Cloud.run('manage_getUploadToken').then(function(res) {
      var Qiniu, getRotate, uploader;
      console.log('token success', res);
      $('#uptoken').val(res.data.token);
      $('#domain').val(config.qiniuDomain);
      Qiniu = new QiniuJsSDK();
      uploader = Qiniu.uploader({
        runtimes: 'html5,flash,html4',
        browse_button: 'pickfiles',
        container: 'container',
        drop_element: 'container',
        max_file_size: '10mb',
        flash_swf_url: 'bower_components/plupload/js/Moxie.swf',
        dragdrop: true,
        chunk_size: '4mb',
        multi_selection: !(mOxie.Env.OS.toLowerCase() === 'ios'),
        uptoken_func: function() {
          return $('#uptoken').val();
        },
        domain: config.qiniuDomain,
        get_new_uptoken: false,
        unique_names: true,
        auto_start: true,
        log_level: 5,
        init: {
          'FilesAdded': function(up, files) {
            $('table').show();
            $('#success').hide();
            plupload.each(files, function(file) {
              var progress;
              progress = new FileProgress(file, 'fsUploadProgress');
              progress.setStatus('等待...');
              progress.bindUploadCancel(up);
            });
          },
          'BeforeUpload': function(up, file) {
            var chunk_size, progress;
            progress = new FileProgress(file, 'fsUploadProgress');
            chunk_size = plupload.parseSize(this.getOption('chunk_size'));
            if (up.runtime === 'html5' && chunk_size) {
              progress.setChunkProgess(chunk_size);
            }
          },
          'UploadProgress': function(up, file) {
            var chunk_size, progress;
            progress = new FileProgress(file, 'fsUploadProgress');
            chunk_size = plupload.parseSize(this.getOption('chunk_size'));
            progress.setProgress(file.percent + '%', file.speed, chunk_size);
          },
          'UploadComplete': function() {
            $('#success').show();
          },
          'FileUploaded': function(up, file, info) {
            var progress;
            progress = new FileProgress(file, 'fsUploadProgress');
            progress.setComplete(up, info);
            console.log('上传后', info);
            res = $.parseJSON(info);
            aImages.push(config.qiniuDomain + res.key);
          },
          'Error': function(up, err, errTip) {
            var progress;
            $('table').show();
            progress = new FileProgress(err.file, 'fsUploadProgress');
            progress.setError();
            progress.setStatus(errTip);
          }
        }
      });
      uploader.bind('FileUploaded', function() {
        console.log('hello man,a file is uploaded');
      });
      $('#container').on('dragenter', function(e) {
        e.preventDefault();
        $('#container').addClass('draging');
        e.stopPropagation();
      }).on('drop', function(e) {
        e.preventDefault();
        $('#container').removeClass('draging');
        e.stopPropagation();
      }).on('dragleave', function(e) {
        e.preventDefault();
        $('#container').removeClass('draging');
        e.stopPropagation();
      }).on('dragover', function(e) {
        e.preventDefault();
        $('#container').addClass('draging');
        e.stopPropagation();
      });
      $('#show_code').on('click', function() {
        $('#myModal-code').modal();
        $('pre code').each(function(i, e) {
          hljs.highlightBlock(e);
        });
      });
      $('body').on('click', 'table button.btn', function() {
        $(this).parents('tr').next().toggle();
      });
      getRotate = function(url) {
        var arr, i, len;
        if (!url) {
          return 0;
        }
        arr = url.split('/');
        i = 0;
        len = arr.length;
        while (i < len) {
          if (arr[i] === 'rotate') {
            return parseInt(arr[i + 1], 10);
          }
          i++;
        }
        return 0;
      };
      $('#myModal-img .modal-body-footer').find('a').on('click', function() {
        var fopArr, imageMogr, img, key, newImg, newUrl, oldUrl, originHeight, rotate;
        img = $('#myModal-img').find('.modal-body img');
        key = img.data('key');
        oldUrl = img.attr('src');
        originHeight = parseInt(img.data('h'), 10);
        fopArr = [];
        rotate = getRotate(oldUrl);
        if (!$(this).hasClass('no-disable-click')) {
          $(this).addClass('disabled').siblings().removeClass('disabled');
          if ($(this).data('imagemogr') !== 'no-rotate') {
            fopArr.push({
              'fop': 'imageMogr2',
              'auto-orient': true,
              'strip': true,
              'rotate': rotate,
              'format': 'png'
            });
          }
        } else {
          $(this).siblings().removeClass('disabled');
          imageMogr = $(this).data('imagemogr');
          if (imageMogr === 'left') {
            rotate = rotate - 90 < 0 ? rotate + 270 : rotate - 90;
          } else if (imageMogr === 'right') {
            rotate = rotate + 90 > 360 ? rotate - 270 : rotate + 90;
          }
          fopArr.push({
            'fop': 'imageMogr2',
            'auto-orient': true,
            'strip': true,
            'rotate': rotate,
            'format': 'png'
          });
        }
        $('#myModal-img .modal-body-footer').find('a.disabled').each(function() {
          var imageMogr;
          var height, imageView, watermark;
          watermark = $(this).data('watermark');
          imageView = $(this).data('imageview');
          imageMogr = $(this).data('imagemogr');
          if (watermark) {
            fopArr.push({
              fop: 'watermark',
              mode: 1,
              image: 'http://www.b1.qiniudn.com/images/logo-2.png',
              dissolve: 100,
              gravity: watermark,
              dx: 100,
              dy: 100
            });
          }
          if (imageView) {
            height = void 0;
            switch (imageView) {
              case 'large':
                height = originHeight;
                break;
              case 'middle':
                height = originHeight * 0.5;
                break;
              case 'small':
                height = originHeight * 0.1;
                break;
              default:
                height = originHeight;
                break;
            }
            fopArr.push({
              fop: 'imageView2',
              mode: 3,
              h: parseInt(height, 10),
              q: 100,
              format: 'png'
            });
          }
          if (imageMogr === 'no-rotate') {
            fopArr.push({
              'fop': 'imageMogr2',
              'auto-orient': true,
              'strip': true,
              'rotate': 0,
              'format': 'png'
            });
          }
        });
        newUrl = Qiniu.pipeline(fopArr, key);
        newImg = new Image;
        img.attr('src', 'images/loading.gif');
        newImg.onload = function() {
          img.attr('src', newUrl);
          img.parent('a').attr('href', newUrl);
        };
        newImg.src = newUrl;
        return false;
      });
    });
  },
  fillToForm: function(formName, data) {
    var $inputs;
    if ($("" + formName).size() < 1 && _.isObject(data)) {
      $inputs = $("." + formName + " input");
      return $.each(data, function(key, value) {
        return $inputs.filter(function() {
          return key === this.id;
        }).val(value);
      });
    } else {
      return console.warn('form不存在或供填充的data不是json');
    }
  },
  isLogin: function() {
    var currentUser, currentUserInfo;
    currentUser = Parse.User.current();
    if (currentUser) {
      currentUserInfo = currentUser.toJSON();
      extraData['currentUserInfo'] = currentUserInfo;
      console.log('当前用户', extraData['currentUserInfo']);
      return $('.login_modal').hide();
    } else {
      return $('.login_modal').show();
    }
  }
};

Swag.registerHelpers();

Parse.initialize(config.appId, config.javascriptKey);

Parse.serverURL = config.domain;

commonFn.isLogin();

$.getJSON("data/IndexContent.json").done(function(indexRes) {
  extraData['indexRes'] = indexRes;
  return $.getJSON("data/GlobalContent.json").done(function(globalRes) {
    var pageData;
    extraData['globalRes'] = globalRes;
    pageData = {
      indexData: extraData.indexRes,
      globalData: extraData.globalRes,
      currentUserData: extraData['currentUserInfo']
    };
    console.log('pageData', pageData);
    $('.nav-main .link').click(function() {
      var ctrlName, tmpName;
      $('.nav-main .link').removeClass('active');
      $(this).addClass('active');
      commonFn.stopDefault();
      tmpName = $(this).data('hbsTarget');
      ctrlName = _.camelCase(tmpName);
      console.log(tmpName);
      console.log(ctrlName);
      $('#main-container').hide().empty();
      return Promise.resolve(commonFn.hbsRender('#main-container', tmpName)).then(function() {
        $('#main-container').fadeIn();
        return console.log("after " + tmpName);
      });
    });
    $('.text-click').click();
    $('.btn_log_out').click(function() {
      return Parse.User.logOut().then(function() {
        extraData['currentUserInfo'] = {};
        return $('.login_modal').show();
      });
    });
    return $('.submit_login').click(function() {
      var password, username, validateRes;
      username = $('#login-username').val().trim();
      password = $('#login-password').val().trim();
      validateRes = $('.js-validation-login').valid();
      if (validateRes === true) {
        return Parse.User.logIn(username, password, {
          success: function(user) {
            var currentUserInfo;
            currentUserInfo = commonFn.transferData(user);
            extraData['currentUserInfo'] = currentUserInfo;
            return $('.login_modal').hide();
          },
          error: function(user, error) {
            swal('出错了...', error.message, 'error');
            console.log('Error: ' + error.code + ' ' + error.message);
          }
        });
      }
    });
  });
});

//# sourceMappingURL=common.js.map
