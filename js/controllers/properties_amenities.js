// Generated by CoffeeScript 1.10.0
$('.property_amenities_form').validate({
  ignore: [],
  errorClass: 'help-block text-right animated fadeInDown',
  errorElement: 'div',
  errorPlacement: function(error, e) {
    jQuery(e).parents('.form-group > div').append(error);
  },
  highlight: function(e) {
    var elem;
    elem = jQuery(e);
    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
    elem.closest('.help-block').remove();
  },
  success: function(e) {
    var elem;
    elem = jQuery(e);
    elem.closest('.form-group').removeClass('has-error');
    elem.closest('.help-block').remove();
  },
  rules: {
    'oData[name]': {
      required: true
    },
    'oData[englishName]': {
      required: true
    }
  },
  messages: {
    'oData[name]': {
      required: '必须输入中文名称'
    },
    'oData[englishName]': {
      required: '必须输入英文名称'
    }
  }
});

Parse.Cloud.run('web_getPropAmenities',{
  type: 0,
  list: true,
}).then(function(res) {
  var totalPages;
  totalPages = res.data.count;
  console.log('sz',res.data.count);
  var list, table, targetTr;
  console.log('web_getPropAmenities success', res);
  return $('#pagination-prop').empty().removeData("twbs-pagination").off("page").twbsPagination({
    totalPages: Math.ceil(totalPages / 20),
    visiblePages: 10,
    onPageClick: function(event, page) {
      var searchProp;
      console.log('page on click', event, page);
      searchProp = {
        type: 0,
        list: true,
        oOption: {
          nSkip: (page - 1) * 20
        }
      };
      return Parse.Cloud.run('web_getPropAmenities', searchProp).then(function(res) {
        list = [];
        console.log('redd',res);
        _(res.data.list.forEach(function(item) {
          var itemJson;
          itemJson = item.toJSON();
          if (itemJson.Status === 0) {
            itemJson.Status = '正常';
          } else {
            itemJson.Status = '隐藏';
          }
          itemJson.typeName = extraData.amenitiesType[parseInt(itemJson.type) - 1];
          itemJson.createdAt = moment(itemJson.createdAt).format('LLL');
          itemJson.updatedAt = moment(itemJson.updatedAt).format('LLL');
          itemJson['action'] = '<a href="#propertyAmenModal" data-toggle="modal" data-obj-id="' + itemJson.objectId + '" class="btn_edit"><i class="fa fa-edit text-primary"></i></a>';
          return list.push(itemJson);
        }));
        table = $('#tablePropertiesAmenities').DataTable({
          bDestroy: true,
          bInfo: false,
          data: list,
          paging: false,
          // "aaSorting": [[5, "desc"]],
          bSort: false,
          searching:false,
          columns: [
            {
              data: 'objectId',
              title: 'id'
            }, {
              data: 'code',
              title: '自增ID'
            }, {
              data: 'typeName',
              title: '类型'
            }, {
              data: 'name',
              title: '中文名称'
            }, {
              data: 'englishName',
              title: '英文名称'
            }, {
              data: 'Status',
              title: '状态'
            }, {
              data: 'updatedAt',
              title: '更新时间'
            }, {
              data: 'createdAt',
              title: '创建时间'
            }, {
              data: 'action',
              title: '操作'
            }
          ]
        });
        targetTr = '';
        $('.btn_edit').click(function() {
          var targetId, targetObj;
          $('.property_amenities_form')[0].reset();
          targetId = $(this).data('objId');
          if (targetId) {
            targetTr = $(this).parent().parent();
            targetObj = _.find(list, {
              'objectId': targetId
            });
            $('#editId').val(targetId);
            commonFn.fillToForm('property_amenities_form', targetObj);
            console.log(targetObj);
            $('#type').val(targetObj.type);
            if (targetObj.Status !== '正常') {
              return $('#Status').val(1);
            } else {
              return $('#Status').val(0);
            }
          } else {
            return $('.property_amenities_form input:first').focus();
          }
        });
        return $('.btn_save').click(function() {
          var saveObj;
          saveObj = $('.property_amenities_form').serializeObject();
          if ($('#editId').val().length) {
            saveObj['oData']['id'] = $('#editId').val();
          }
          saveObj['oData']['type'] = parseInt(saveObj.oData.type);
          console.log('提交到云代码的obj', saveObj);
          if ($('.property_amenities_form').valid()) {
            return Parse.Cloud.run('web_Amenities', saveObj).then(function(res) {
              var newData;
              console.log('web_Amenities success', res);
              newData = res.data.toJSON();
              newData.updatedAt = moment(newData.createdAt).format('LLL');
              newData.createdAt = moment(newData.updatedAt).format('LLL');
              newData.action = '刷新后再编辑';
              if (targetTr) {
                table.row(targetTr).data(newData).draw();
              } else {
                table.row.add(newData).draw();
              }
              return $('#propertyAmenModal').modal('hide');
            }, function(error) {
              swal('出错了...', error.message, 'error');
              return console.log('Error: ' + error.code + ' ' + error.message);
            });
          }
        });
      });
    }
  });

});

//# sourceMappingURL=properties_amenities.js.map
