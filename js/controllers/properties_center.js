// Generated by CoffeeScript 1.10.0
var $datepickerMulti, $datepickerRange, GMT_TO_UTC, aImages, addDay, show, targetTr, timetall;

aImages = [];

targetTr = '';

$datepickerMulti = $('.datepicker-multi');

$datepickerRange = $('.input-daterange');

$datepickerMulti.datepicker({
  multidate: true,
  language: "zh-CN",
  clearBtn: true
});

$datepickerRange.datepicker({
  language: "zh-CN",
  startDate: new Date(),
  format: "yyyy-mm-dd",
  autoclose: true
});

// 渲染房源列表的视图
var renderPropertiesList = function(res)  {

  var $tablePropertiesList, propList, table;
  console.log('web_searchProp success', res);
  propList = [];
  _(res.data.list.forEach(function(item) {
    if (item.attributes.Status !== 2) {
      item = item.toJSON();
      item['linkHost'] = '<a href="' + config.frontEndUrl + 'user-show.html?userId=' + item.ownBy.objectId + ' " target="_blank">' + item.ownBy.nickname + '</a>';
      item['linkProperty'] = '<a href="' + config.frontEndUrl + 'properties-detail.html?propertyId=' + item.objectId + ' " target="_blank">' + item.name + '</a>';
      item.createdAt = moment(item.createdAt).format('LLL');
      item.updatedAt = moment(item.updatedAt).format('LLL');
      item.propertyType = item.propertyType.objectId;
      item.roomType = item.roomType.objectId;
      item.pOwnBy = item.ownBy.objectId;
      item.st = item.addr.st;
      item.addrCity = item.addr.city;
      item.state = item.addr.state;
      item.country = item.addr.country;
      item.zipCode = item.addr.zipCode;
      item.cityGroup = item.city.objectId;
      item.discountWeekly = item.discount.weekly;
      item.discountMonth = item.discount.month;
      item.cityName = item.city.name;
      if (item['available'] === true) {
        item.available = '<i class="fa fa-unlock text-success"></i>';
      } else {
        item.available = '<i class="fa fa-lock text-danger"></i>';
      }
      item['action'] = '<a href="#propertyModal" data-toggle="modal" data-obj-id="' + item.objectId + '" class="btn_edit m-r-10"><i class="fa fa-edit text-primary"></i></a><a href="#;" data-obj-id="' + item.objectId + '" class="btn_remove"><i class="fa fa-trash text-danger"></i></a>';


      // console.log(item.createdAt);

      return propList.push(item);
    }
  }));

  console.log('web_searchProp to plain obj success', propList);
  console.log('web_searchProp to plain obj success length', propList.length);
  $tablePropertiesList = $('#tablePropertiesList');
  table = $tablePropertiesList.DataTable({
    data: propList,
    bDestroy: true,
    bInfo: false,
    paging: false,
    bSort: false,
    searching:false,
    // "aaSorting": [[6, "desc"]],
    columns: [
      {
        data: 'objectId',
        title: 'id'
      }, {
        data: 'linkProperty',
        title: '房源名称'
      }, {
        data: 'linkHost',
        title: '房东全名'
      }, {
        data: 'cityName',
        title: '所处城市圈'
      }, {
        data: 'price',
        title: '价格'
      }, {
        data: 'available',
        title: '可用状态'
      }, {
        data: 'updatedAt',
        title: '最后更新时间'
      }, {
        data: 'action',
        title: '操作'
      }
    ]
  });
  //全选 不选 反选
  function checkedal($this,com){
    var dataarr=$this.data("attr");
    if($this.is(':checked')){
      if(dataarr=='all'){
        $("input[type='checkbox'][name='"+com+"']").prop("checked",true);
      }else if(dataarr=='none'){
        $("input[type='checkbox'][name='"+com+"']").prop("checked",false);
      }else{
        var checkarray=$("input[type='checkbox'][name='"+com+"']");
        for(var i=0;i<checkarray.length;i++){
          if(checkarray[i].checked==true){
            checkarray[i].checked=false;
          }else{
            checkarray[i].checked=true;
          }
        }
      }
    }else {
      $this.prop("checked",false);
      if(dataarr=='all'){
        $("input[type='checkbox'][name='"+com+"']").prop("checked",false);
      }
      if(dataarr=='reverse'){
        var checkarray=$("input[type='checkbox'][name='"+com+"']");
        for(var i=0;i<checkarray.length;i++){
          if(checkarray[i].checked==true){
            checkarray[i].checked=false;
          }else{
            checkarray[i].checked=true;
          }
        }
      }
    }
  }

  $(".commonAmenities").unbind().click(function () {
    var datachecked=$(this).data("checked");
        checkedal($(this),datachecked);

  });
  $(".otherAmenities").unbind().click(function () {
    var datachecked=$(this).data("checked");
    checkedal($(this),datachecked);

  });
  $(".surrounding").unbind().click(function () {
    var datachecked=$(this).data("checked");
    checkedal($(this),datachecked);

  });
  $(".valueAddedServiece").unbind().click(function () {
    var datachecked=$(this).data("checked");
    checkedal($(this),datachecked);

  });
  $(".securityAmenities").unbind().click(function () {
    var datachecked=$(this).data("checked");
    checkedal($(this),datachecked);

  });
  $('.btn_edit').unbind().click(function() {
    $('#calendar').fullCalendar( 'destroy' );
    $('.show-calendar').css("display","none");
    var targetId, targetObj;
    targetId = $(this).data('objId');
    aImages = [];
    $('#summernoteDesc').summernote('destroy');
    $('#summernoteRule').summernote('destroy');
    $('.summernote').empty();
    $datepickerMulti.datepicker('clearDates');
    $datepickerRange.datepicker('clearDates');
    $('.property_form')[0].reset();
    console.log(targetId);

    $('#if_calendar').unbind().click(function() {
      $('.show-calendar').toggle();
      if($('.show-calendar').css("display")!="none") {
        $('#calendar').fullCalendar({
          header: {
            right: 'prev,next',
            center: 'title',
            left: 'month'
          },
          defaultView: 'month',
          editable: true,
          droppable: true,
          monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
          monthNamesShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
          dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
          dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
          today: ['今天'],
          firstDay: 1,
          buttonText: {
            today: '今天',
            month: '月',
            week: '周',
            day: '日',
            prev: '上一月',
            next: '下一月'
          },
          events: [],
          dayClick: function (date, event, jsEvent, resourceObj) {
            var day_enddate, events, today_date;
            today_date = new Date;
            day_enddate = addDay(date, 1);
            if (date > today_date) {
              events = $('#calendar').fullCalendar('clientEvents', function (event) {
                var eventEnd, eventStart, theDate;
                eventStart = event.start._d;
                eventEnd = event.end ? addDay(event.end._d, -1) : eventStart;
                theDate = date._d;
                return eventStart <= theDate && eventEnd >= theDate && !(eventStart < theDate && eventEnd === theDate) || eventStart === theDate && eventEnd === null;
              });
              console.log('evnet', events);
              if (events.length === 0) {
                $('#calendar').fullCalendar('renderEvent', {
                  title: '日期不可用',
                  start: date,
                  end: day_enddate,
                  color: '#3797df'
                });
              } else {
                if (events[0].start._d < today_date) {
                  swal('出错了...', '今天之前的进程不能删除', 'error');
                } else {
                  $('#calendar').fullCalendar('removeEvents', events[0]._id);
                }
              }
            } else {
              swal('出错了...', '今天之前的时间无法添加日程', 'error');
            }
          }
        });
      }

    });

    if (targetId) {
      $('#calendar').fullCalendar( 'destroy' );

      targetTr = $(this).parent().parent();
      targetObj = _.find(propList, {
        'objectId': targetId
      });
      $('#editId').val(targetId);
      console.log('匹配到需要编辑的对象', targetObj);
      //日历
      var arr = [];
      if (targetObj.invalidDates) {
        _(targetObj.invalidDates.forEach(function (item) {

          var res;
          res = {
            title: '日期不可用',
            start: new Date(item),
            end: new Date(item),
            color: '#3797df'
          };
          return arr.push(res);
        }));
      }
      console.log('arrrrr',arr);
      $('#if_calendar').unbind().click(function() {
        $('.show-calendar').toggle();
        if($('.show-calendar').css("display")!="none") {
          $('#calendar').fullCalendar({
            header: {
              right: 'prev,next',
              center: 'title',
              left: 'month'
            },
            defaultView: 'month',
            editable: true,
            droppable: true,
            monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
            monthNamesShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
            dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
            dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
            today: ['今天'],
            firstDay: 1,
            buttonText: {
              today: '今天',
              month: '月',
              week: '周',
              day: '日',
              prev: '上一月',
              next: '下一月'
            },
            events:arr,
            dayClick: function (date, event, jsEvent, resourceObj) {
              var day_enddate, events, today_date;
              today_date = new Date;
                date = Model_Time(date._d);
              day_enddate = date;
              if (date > today_date) {
                events = $('#calendar').fullCalendar('clientEvents', function (event) {
                  var eventEnd, eventStart, theDate;
                  eventStart = event.start._d;
                  eventEnd = event.end ? event.end._d : event.start._d;
                  theDate = date;
                  return eventStart <= theDate && eventEnd >= theDate && !(eventStart < theDate && eventEnd === theDate) || eventStart === theDate && eventEnd === null;
                });
                console.log('evnet', events);
                if (events.length === 0) {
                  $('#calendar').fullCalendar('renderEvent', {
                    title: '日期不可用',
                    start: date,
                    end: day_enddate,
                    color: '#3797df'
                  });
                } else {
                  if (events[0].start._d < today_date) {
                    swal('出错了...', '今天之前的进程不能删除', 'error');
                  } else {
                    $('#calendar').fullCalendar('removeEvents', events[0]._id);
                  }
                }
              } else {
                swal('出错了...', '今天之前的时间无法添加日程', 'error');
              }
            }
          });
        }

      });

      if (targetObj.rule.other) {
        $('#summernoteRule').append(targetObj.rule.other);
      }
      if (targetObj.description) {
        $('#summernoteDesc').append(targetObj.description);
      }
      $('.summernote').summernote({
        height: 150
      });
      $('.qiniu_area').hide();
      $('#success').hide();
      $('.table.table-striped.table-hover.text-left').hide();
      $('#fsUploadProgress').empty();
      $('#Status').val(targetObj.Status);
      $('#CheckInTime').val(targetObj.CheckInTime);
      $('#CheckOutTime').val(targetObj.CheckOutTime);
      commonFn.fillToForm('property_form', targetObj);
      $('#propertyType').val(targetObj.propertyType);
      $('#roomType').val(targetObj.roomType);
      $('#cityGroup').val(targetObj.cityGroup);
      $("#remark").val(targetObj.remark);
      if (targetObj.available === '<i class="fa fa-unlock text-success"></i>') {
        $('#available').val('0');
      } else {
        $('#available').val('1');
      }
      $('input[type="checkbox"]').prop("checked", false);
      if (targetObj.commonAmenities) {
        $.each(targetObj.commonAmenities, function(key, value) {
          return $('#commonAmenities' + value + '').prop("checked", true);
        });
      }
      if (targetObj.surrounding) {
        $.each(targetObj.surrounding, function(key, value) {
          return $('#surrounding' + value + '').prop("checked", true);
        });
      }
      if (targetObj.valueAddedServiece) {
        $.each(targetObj.valueAddedServiece, function(key, value) {
          return $('#valueAddedServiece' + value + '').prop("checked", true);
        });
      }
      if (targetObj.otherAmenities) {
        $.each(targetObj.otherAmenities, function(key, value) {
          return $('#otherAmenities' + value + '').prop("checked", true);
        });
      }
      $('.open_date_multi').click(function() {
        $('.datepicker_area').toggle();
        $datepickerRange.datepicker('clearDates');
        if (targetObj.invalidDates) {
          return $datepickerMulti.datepicker('setDates', targetObj.invalidDates);
        }
      });
      $('.open_date_range').click(function() {
        $('.datepicker_area').toggle();
        return $datepickerMulti.datepicker('clearDates');
      });
      return $('.clear_date').click(function() {
        $datepickerMulti.datepicker('clearDates');
        return $datepickerRange.datepicker('clearDates');
      });
    } else {
      targetTr = '';
      $('#editId').val('');
      $('.propertyModal input:first').focus();
      $('#pOwnBy').val(extraData.currentUserInfo.objectId);
      return $('.summernote').summernote({
        height: 150
      });
    }
  });
  $('.btn_save').unbind().click(function() {
    var aInvalidDates, saveObj, that;
    var time_start = [], time_end = [];
    var events = [];
    var resarr = [];
    if ($('.show-calendar').css("display") != "none") {
    var res = $('#calendar').fullCalendar('clientEvents');
    for (var i = 0; i < res.length; i++) {
      time_start.push(res[i]._start._d);
      events.push({
        start: moment(res[i]._start._d).format('L'),
        end:  moment(getAutoDate(res[i]._end==null?res[i]._start._d:res[i]._end._d)).format('L')
      });
    }
    console.log(res);
    for (var i = 0; i < events.length; i++) {
      show(events[i].start, events[i].end, resarr);
    }
    console.log(resarr);
  }
    if ($('.property_form').valid()) {
      that = this;
      $('.btn_save').prop('disabled', true);
      saveObj = $('.property_form').serializeObject();
      aInvalidDates = $('.js-datepicker-in').datepicker('getDates');
      saveObj.oData.description = $('#summernoteDesc').summernote('code');
      saveObj.oData.rule = {};
      saveObj.oData.rule.other = $('#summernoteRule').summernote('code');
      saveObj['oData']['invalidDates'] = resarr;
      saveObj.oData.remark=$("#remark").val();
      if (saveObj['oData']['available'] === '0') {
        saveObj['oData']['available'] = true;
      } else {
        saveObj['oData']['available'] = false;
      }
      if ($('#editId').val().length) {
        saveObj['oData']['id'] = $('#editId').val();
      }
      if (aImages.length) {
        saveObj['oData']['images'] = aImages;
      }
      saveObj['oData']['commonAmenities'] = [];
      saveObj['oData']['surrounding'] = [];
      saveObj['oData']['valueAddedServiece'] = [];
      saveObj['oData']['otherAmenities'] = [];
      saveObj['oData']['securityAmenities'] = [];
      $('input[name="commonAmenities"]:checked').each(function() {
        return saveObj['oData']['commonAmenities'].push(this.value);
      });
      $('input[name="surrounding"]:checked').each(function() {
        return saveObj['oData']['surrounding'].push(this.value);
      });
      $('input[name="valueAddedServiece"]:checked').each(function() {
        return saveObj['oData']['valueAddedServiece'].push(this.value);
      });
      $('input[name="otherAmenities"]:checked').each(function() {
        return saveObj['oData']['otherAmenities'].push(this.value);
      });
      $('input[name="securityAmenities"]:checked').each(function() {
        return saveObj['oData']['securityAmenities'].push(this.value);
      });
      saveObj.oData.maxGuest =Math.round(saveObj.oData.maxGuest*100)/100;
      saveObj.oData.bathroomCount = parseInt(saveObj.oData.bathroomCount);
      saveObj.oData.bedroomCount = parseInt(saveObj.oData.bedroomCount);
      saveObj.oData.bedCount = parseInt(saveObj.oData.bedCount);
      saveObj.oData.price = Math.round(saveObj.oData.price*100)/100;
      saveObj.oData.lessDays = parseInt(saveObj.oData.lessDays);
      saveObj.oData.CleanFee =parseFloat(saveObj.oData.CleanFee);
      saveObj.oData.ServiceFee =Math.round(saveObj.oData.ServiceFee*100)/100;
      saveObj.oData.Status = parseInt(saveObj.oData.Status);
      saveObj.oData.CheckInTime = parseInt(saveObj.oData.CheckInTime);
      saveObj.oData.CheckOutTime = parseInt(saveObj.oData.CheckOutTime);
      saveObj.oData.deposit =Math.round(saveObj.oData.deposit*100)/100;
      saveObj.oData.tax = Math.round(saveObj.oData.tax*100)/100;
      console.log('saveObj',saveObj);
      return Parse.Cloud.run('manage_Property', saveObj).then(function(res) {
        var newData;
        $('.btn_save').prop('disabled', false);
        console.log('manage_Property success', res);
        newData = res.data.toJSON();
        console.log('manage_Property success', newData);
        aImages = [];
        newData.linkProperty = '<a href="' + config.frontEndUrl + 'properties-detail.html?propertyId=' + newData.objectId + ' " target="_blank">' + newData.name + '</a>';
        newData.linkHost = '<a href="' + config.frontEndUrl + 'user-show.html?userId=' + newData.ownBy.objectId + ' " target="_blank">' + newData.ownBy.nickname + '</a>';
        newData.cityName = newData.city.name;
        newData.createdAt = moment(newData.createdAt).format('YYYY-MM-DD hh:mm:ss');
        newData.updatedAt = moment(newData.updatedAt).format('YYYY-MM-DD hh:mm:ss');
        if (newData['available'] === true) {
          newData.available = '<i class="fa fa-unlock text-success"></i>';
        } else {
          newData.available = '<i class="fa fa-lock text-danger"></i>';
        }
        newData.action1 = '<a href="#propertyModal" data-toggle="modal" data-obj-id="' + newData.objectId + '" class="btn_edit m-r-10"><i class="fa fa-edit text-primary"></i></a><a href="#;" data-obj-id="' + newData.objectId + '" class="btn_remove"><i class="fa fa-trash text-danger"></i></a>';
        newData.action = '刷新页面后编辑';
        if (targetTr) {
          if (newData.Status === 2) {
            table.row(targetTr).remove().draw();
          } else {
            table.row(targetTr).data(newData).draw();
          }
        } else {
          table.row.add(newData).draw();
        }
        if ($(that).hasClass('go_on')) {
          $('#pOwnBy').val(extraData.currentUserInfo.objectId);
          $('.property_form')[0].reset();
          $('.summernote').empty();
          $('.propertyModal input:first').focus();
          return $('#pOwnBy').val(extraData.currentUserInfo.objectId);
        } else {
          return $('#propertyModal').modal('hide');
        }
      }, function(error) {
        swal('出错了...', error.message, 'error');
        return console.log('Error: ' + error.code + ' ' + error.message);
      });
    }
  });
  return $('.btn_remove').unbind().click(function() {
    var $this;
    $this = $(this);
    return swal({
      title: "你确定需要在前台后台都隐藏该房源吗?",
      text: "数据隐藏后,你依然可以通过筛选和编辑更改这个房源的状态!",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#DD6B55",
      confirmButtonText: "是的,隐藏它!",
      cancelButtonText: "取消",
      closeOnConfirm: false
    }, function(isConfirm) {
      var objId, saveObj;
      if (isConfirm) {
        $('.btn_save').prop('disabled', true);
        objId = $this.data('objId');
        targetTr = $this.parent().parent();
        saveObj = {
          oData: {
            id: objId,
            Status: 2
          }
        };
        return Parse.Cloud.run('manage_Property', saveObj).then(function(res) {
          console.log(res.data.toJSON());
          $('.btn_save').prop('disabled', false);
          table.row(targetTr).remove().draw();
          return swal({
            title: "隐藏成功!",
            text: "数据隐藏后,你依然可以通过筛选和编辑更改这个房源的状态!",
            type: "success",
            timer: 2000,
            showConfirmButton: false
          });
        }, function(error) {
          swal('出错了...', error.message, 'error');
          return console.log('Error: ' + error.code + ' ' + error.message);
        });
      }
    });
  });
};

// 渲染分页
var renderPagination = function(totalPages, visiblePages, onPageClick) {

  if (totalPages <= 0) {
    $('#pagination-prop').empty().removeData("twbs-pagination").off("page");
    onPageClick(null, 1);
    return;
  }

  $('#pagination-prop').empty().removeData("twbs-pagination").off("page").twbsPagination({
    totalPages: totalPages,
    visiblePages: visiblePages,
    onPageClick: onPageClick
  });

};
// 渲染房源视图
var renderPropertiesView = function(filter) {
  handleSearch(filter, function(err, res){
    if (err) {
      console.log(err);
      return;
    }

    var totalPages = Math.ceil(res.data.count / filter.limit);
    var visiblePages = 10;
    var onPageClick = function(event, page) {

      $('#tablePropertiesList').html('');

      filter.page = page - 1;

      handleSearch(filter, function(err, res){
        if (err) {
          console.log(err);
          return;
        }
        renderPropertiesList(res);
        $('#tablePropertiesList_wrapper .row .col-sm-6')[0].innerHTML = '一共查询到 '+ res.data.count + ' 条数据';
      });
    };

    renderPagination(totalPages, visiblePages, onPageClick);

  });

};




Parse.Cloud.run('web_searchProp').then(function(res) {
  var totalPages;
  totalPages = res.data.count;
  console.log(res);



  /*
  return $('#pagination-prop').empty().removeData("twbs-pagination").off("page").twbsPagination({
    totalPages: Math.ceil(totalPages / 20),
    visiblePages: 10,
    onPageClick: function(event, page) {
      var searchProp;
      console.log('page on click', event, page);
      searchProp = {
        oOption: {
          nSkip: (page - 1) * 20
        }
      };
      return Parse.Cloud.run('web_searchProp', searchProp).then(function(res) {
        var $tablePropertiesList, propList, table;
        console.log('web_searchProp success', res);
        propList = [];
        _(res.data.list.forEach(function(item) {
          if (item.attributes.Status !== 2) {
            item = item.toJSON();
            item['linkHost'] = '<a href="' + config.frontEndUrl + 'user-show.html?userId=' + item.ownBy.objectId + ' " target="_blank">' + item.ownBy.nickname + '</a>';
            item['linkProperty'] = '<a href="' + config.frontEndUrl + 'properties-detail.html?propertyId=' + item.objectId + ' " target="_blank">' + item.name + '</a>';
            item.createdAt = moment(item.createdAt).format('LLL');
            item.updatedAt = moment(item.updatedAt).format('LLL');
            item.propertyType = item.propertyType.objectId;
            item.roomType = item.roomType.objectId;
            item.pOwnBy = item.ownBy.objectId;
            item.st = item.addr.st;
            item.addrCity = item.addr.city;
            item.state = item.addr.state;
            item.country = item.addr.country;
            item.zipCode = item.addr.zipCode;
            item.cityGroup = item.city.objectId;
            item.discountWeekly = item.discount.weekly;
            item.discountMonth = item.discount.month;
            item.cityName = item.city.name;
            if (item['available'] === true) {
              item.available = '<i class="fa fa-unlock text-success"></i>';
            } else {
              item.available = '<i class="fa fa-lock text-danger"></i>';
            }
            item['action'] = '<a href="#propertyModal" data-toggle="modal" data-obj-id="' + item.objectId + '" class="btn_edit m-r-10"><i class="fa fa-edit text-primary"></i></a><a href="#;" data-obj-id="' + item.objectId + '" class="btn_remove"><i class="fa fa-trash text-danger"></i></a>';
            return propList.push(item);
          }
        }));
        console.log('web_searchProp to plain obj success', propList);
        console.log('web_searchProp to plain obj success length', propList.length);
        $tablePropertiesList = $('#tablePropertiesList');
        table = $tablePropertiesList.DataTable({
          data: propList,
          bDestroy: true,
          bInfo: false,
          paging: false,
          "aaSorting": [[6, "desc"]],
          columns: [
            {
              data: 'objectId',
              title: 'id'
            }, {
              data: 'linkProperty',
              title: '房源名称'
            }, {
              data: 'linkHost',
              title: '房东全名'
            }, {
              data: 'cityName',
              title: '所处城市圈'
            }, {
              data: 'price',
              title: '价格'
            }, {
              data: 'available',
              title: '可用状态'
            }, {
              data: 'updatedAt',
              title: '最后更新时间'
            }, {
              data: 'action',
              title: '操作'
            }
          ]
        });
        //全选 不选 反选
        function checkedal($this,com){
          var dataarr=$this.data("attr");
          if($this.is(':checked')){
            if(dataarr=='all'){
              $("input[type='checkbox'][name='"+com+"']").prop("checked",true);
            }else if(dataarr=='none'){
              $("input[type='checkbox'][name='"+com+"']").prop("checked",false);
            }else{
              var checkarray=$("input[type='checkbox'][name='"+com+"']");
              for(var i=0;i<checkarray.length;i++){
                if(checkarray[i].checked==true){
                  checkarray[i].checked=false;
                }else{
                  checkarray[i].checked=true;
                }
              }
            }
          }else {
            $this.prop("checked",false);
            if(dataarr=='all'){
              $("input[type='checkbox'][name='"+com+"']").prop("checked",false);
            }
            if(dataarr=='reverse'){
              var checkarray=$("input[type='checkbox'][name='"+com+"']");
              for(var i=0;i<checkarray.length;i++){
                if(checkarray[i].checked==true){
                  checkarray[i].checked=false;
                }else{
                  checkarray[i].checked=true;
                }
              }
            }
          }
        }

        $(".commonAmenities").unbind().click(function () {
          var datachecked=$(this).data("checked");
              checkedal($(this),datachecked);

        });
        $(".otherAmenities").unbind().click(function () {
          var datachecked=$(this).data("checked");
          checkedal($(this),datachecked);

        });
        $(".surrounding").unbind().click(function () {
          var datachecked=$(this).data("checked");
          checkedal($(this),datachecked);

        });
        $(".valueAddedServiece").unbind().click(function () {
          var datachecked=$(this).data("checked");
          checkedal($(this),datachecked);

        });
        $(".securityAmenities").unbind().click(function () {
          var datachecked=$(this).data("checked");
          checkedal($(this),datachecked);

        });
        $('.btn_edit').unbind().click(function() {
          $('#calendar').fullCalendar( 'destroy' );
          $('.show-calendar').css("display","none");
          var targetId, targetObj;
          targetId = $(this).data('objId');
          aImages = [];
          $('#summernoteDesc').summernote('destroy');
          $('#summernoteRule').summernote('destroy');
          $('.summernote').empty();
          $datepickerMulti.datepicker('clearDates');
          $datepickerRange.datepicker('clearDates');
          $('.property_form')[0].reset();
          console.log(targetId);

          $('#if_calendar').unbind().click(function() {
            $('.show-calendar').toggle();
            if($('.show-calendar').css("display")!="none") {
              $('#calendar').fullCalendar({
                header: {
                  right: 'prev,next',
                  center: 'title',
                  left: 'month'
                },
                defaultView: 'month',
                editable: true,
                droppable: true,
                monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
                monthNamesShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
                dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
                dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
                today: ['今天'],
                firstDay: 1,
                buttonText: {
                  today: '今天',
                  month: '月',
                  week: '周',
                  day: '日',
                  prev: '上一月',
                  next: '下一月'
                },
                events: [],
                dayClick: function (date, event, jsEvent, resourceObj) {
                  var day_enddate, events, today_date;
                  today_date = new Date;
                  day_enddate = addDay(date, 1);
                  if (date > today_date) {
                    events = $('#calendar').fullCalendar('clientEvents', function (event) {
                      var eventEnd, eventStart, theDate;
                      eventStart = event.start._d;
                      eventEnd = event.end ? addDay(event.end._d, -1) : eventStart;
                      theDate = date._d;
                      return eventStart <= theDate && eventEnd >= theDate && !(eventStart < theDate && eventEnd === theDate) || eventStart === theDate && eventEnd === null;
                    });
                    console.log('evnet', events);
                    if (events.length === 0) {
                      $('#calendar').fullCalendar('renderEvent', {
                        title: '日期不可用',
                        start: date,
                        end: day_enddate,
                        color: '#3797df'
                      });
                    } else {
                      if (events[0].start._d < today_date) {
                        swal('出错了...', '今天之前的进程不能删除', 'error');
                      } else {
                        $('#calendar').fullCalendar('removeEvents', events[0]._id);
                      }
                    }
                  } else {
                    swal('出错了...', '今天之前的时间无法添加日程', 'error');
                  }
                }
              });
            }

          });

          if (targetId) {
            $('#calendar').fullCalendar( 'destroy' );

            targetTr = $(this).parent().parent();
            targetObj = _.find(propList, {
              'objectId': targetId
            });
            $('#editId').val(targetId);
            console.log('匹配到需要编辑的对象', targetObj);
            //日历
            var arr = [];
            if (targetObj.invalidDates) {
              _(targetObj.invalidDates.forEach(function (item) {

                var res;
                res = {
                  title: '日期不可用',
                  start: new Date(item),
                  end: new Date(item),
                  color: '#3797df'
                };
                return arr.push(res);
              }));
            }
            console.log('arrrrr',arr);
            $('#if_calendar').unbind().click(function() {
              $('.show-calendar').toggle();
              if($('.show-calendar').css("display")!="none") {
                $('#calendar').fullCalendar({
                  header: {
                    right: 'prev,next',
                    center: 'title',
                    left: 'month'
                  },
                  defaultView: 'month',
                  editable: true,
                  droppable: true,
                  monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
                  monthNamesShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
                  dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
                  dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
                  today: ['今天'],
                  firstDay: 1,
                  buttonText: {
                    today: '今天',
                    month: '月',
                    week: '周',
                    day: '日',
                    prev: '上一月',
                    next: '下一月'
                  },
                  events:arr,
                  dayClick: function (date, event, jsEvent, resourceObj) {
                    var day_enddate, events, today_date;
                    today_date = new Date;
                      date = Model_Time(date._d);
                    day_enddate = date;
                    if (date > today_date) {
                      events = $('#calendar').fullCalendar('clientEvents', function (event) {
                        var eventEnd, eventStart, theDate;
                        eventStart = event.start._d;
                        eventEnd = event.end ? event.end._d : event.start._d;
                        theDate = date;
                        return eventStart <= theDate && eventEnd >= theDate && !(eventStart < theDate && eventEnd === theDate) || eventStart === theDate && eventEnd === null;
                      });
                      console.log('evnet', events);
                      if (events.length === 0) {
                        $('#calendar').fullCalendar('renderEvent', {
                          title: '日期不可用',
                          start: date,
                          end: day_enddate,
                          color: '#3797df'
                        });
                      } else {
                        if (events[0].start._d < today_date) {
                          swal('出错了...', '今天之前的进程不能删除', 'error');
                        } else {
                          $('#calendar').fullCalendar('removeEvents', events[0]._id);
                        }
                      }
                    } else {
                      swal('出错了...', '今天之前的时间无法添加日程', 'error');
                    }
                  }
                });
              }

            });

            if (targetObj.rule.other) {
              $('#summernoteRule').append(targetObj.rule.other);
            }
            if (targetObj.description) {
              $('#summernoteDesc').append(targetObj.description);
            }
            $('.summernote').summernote({
              height: 150
            });
            $('.qiniu_area').hide();
            $('#success').hide();
            $('.table.table-striped.table-hover.text-left').hide();
            $('#fsUploadProgress').empty();
            $('#CheckInTime').val(targetObj.CheckInTime);
            $('#CheckOutTime').val(targetObj.CheckOutTime);
            commonFn.fillToForm('property_form', targetObj);
            $('#propertyType').val(targetObj.propertyType);
            $('#roomType').val(targetObj.roomType);
            $('#cityGroup').val(targetObj.cityGroup);
            if (targetObj.available === '<i class="fa fa-unlock text-success"></i>') {
              $('#available').val('0');
            } else {
              $('#available').val('1');
            }
            $('input[type="checkbox"]').prop("checked", false);
            if (targetObj.commonAmenities) {
              $.each(targetObj.commonAmenities, function(key, value) {
                return $('#commonAmenities' + value + '').prop("checked", true);
              });
            }
            if (targetObj.surrounding) {
              $.each(targetObj.surrounding, function(key, value) {
                return $('#surrounding' + value + '').prop("checked", true);
              });
            }
            if (targetObj.valueAddedServiece) {
              $.each(targetObj.valueAddedServiece, function(key, value) {
                return $('#valueAddedServiece' + value + '').prop("checked", true);
              });
            }
            if (targetObj.otherAmenities) {
              $.each(targetObj.otherAmenities, function(key, value) {
                return $('#otherAmenities' + value + '').prop("checked", true);
              });
            }
            $('.open_date_multi').click(function() {
              $('.datepicker_area').toggle();
              $datepickerRange.datepicker('clearDates');
              if (targetObj.invalidDates) {
                return $datepickerMulti.datepicker('setDates', targetObj.invalidDates);
              }
            });
            $('.open_date_range').click(function() {
              $('.datepicker_area').toggle();
              return $datepickerMulti.datepicker('clearDates');
            });
            return $('.clear_date').click(function() {
              $datepickerMulti.datepicker('clearDates');
              return $datepickerRange.datepicker('clearDates');
            });
          } else {
            targetTr = '';
            $('#editId').val('');
            $('.propertyModal input:first').focus();
            $('#pOwnBy').val(extraData.currentUserInfo.objectId);
            return $('.summernote').summernote({
              height: 150
            });
          }
        });
        $('.btn_save').unbind().click(function() {
          var aInvalidDates, saveObj, that;
          var time_start = [], time_end = [];
          var events = [];
          var resarr = [];
          if ($('.show-calendar').css("display") != "none") {
          var res = $('#calendar').fullCalendar('clientEvents');
          for (var i = 0; i < res.length; i++) {
            time_start.push(res[i]._start._d);
            events.push({
              start: moment(res[i]._start._d).format('L'),
              end:  moment(getAutoDate(res[i]._end==null?res[i]._start._d:res[i]._end._d)).format('L')
            });
          }
          console.log(res);
          for (var i = 0; i < events.length; i++) {
            show(events[i].start, events[i].end, resarr);
          }
          console.log(resarr);
        }
          if ($('.property_form').valid()) {
            that = this;
            $('.btn_save').prop('disabled', true);
            saveObj = $('.property_form').serializeObject();
            aInvalidDates = $('.js-datepicker-in').datepicker('getDates');
            saveObj.oData.description = $('#summernoteDesc').summernote('code');
            saveObj.oData.rule = {};
            saveObj.oData.rule.other = $('#summernoteRule').summernote('code');
            saveObj['oData']['invalidDates'] = resarr;
            if (saveObj['oData']['available'] === '0') {
              saveObj['oData']['available'] = true;
            } else {
              saveObj['oData']['available'] = false;
            }
            if ($('#editId').val().length) {
              saveObj['oData']['id'] = $('#editId').val();
            }
            if (aImages.length) {
              saveObj['oData']['images'] = aImages;
            }
            saveObj['oData']['commonAmenities'] = [];
            saveObj['oData']['surrounding'] = [];
            saveObj['oData']['valueAddedServiece'] = [];
            saveObj['oData']['otherAmenities'] = [];
            saveObj['oData']['securityAmenities'] = [];
            $('input[name="commonAmenities"]:checked').each(function() {
              return saveObj['oData']['commonAmenities'].push(this.value);
            });
            $('input[name="surrounding"]:checked').each(function() {
              return saveObj['oData']['surrounding'].push(this.value);
            });
            $('input[name="valueAddedServiece"]:checked').each(function() {
              return saveObj['oData']['valueAddedServiece'].push(this.value);
            });
            $('input[name="otherAmenities"]:checked').each(function() {
              return saveObj['oData']['otherAmenities'].push(this.value);
            });
            $('input[name="securityAmenities"]:checked').each(function() {
              return saveObj['oData']['securityAmenities'].push(this.value);
            });
            saveObj.oData.maxGuest =Math.round(saveObj.oData.maxGuest*100)/100;
            saveObj.oData.bathroomCount = parseInt(saveObj.oData.bathroomCount);
            saveObj.oData.bedroomCount = parseInt(saveObj.oData.bedroomCount);
            saveObj.oData.bedCount = parseInt(saveObj.oData.bedCount);
            saveObj.oData.price = Math.round(saveObj.oData.price*100)/100;
            saveObj.oData.lessDays = parseInt(saveObj.oData.lessDays);
            saveObj.oData.CleanFee =parseFloat(saveObj.oData.CleanFee);
            saveObj.oData.ServiceFee =Math.round(saveObj.oData.ServiceFee*100)/100;
            saveObj.oData.Status = parseInt(saveObj.oData.Status);
            saveObj.oData.CheckInTime = parseInt(saveObj.oData.CheckInTime);
            saveObj.oData.CheckOutTime = parseInt(saveObj.oData.CheckOutTime);
            saveObj.oData.deposit =Math.round(saveObj.oData.deposit*100)/100;
            saveObj.oData.tax = Math.round(saveObj.oData.tax*100)/100;
            console.log('saveObj',saveObj);
            return Parse.Cloud.run('manage_Property', saveObj).then(function(res) {
              var newData;
              $('.btn_save').prop('disabled', false);
              console.log('manage_Property success', res);
              newData = res.data.toJSON();
              console.log('manage_Property success', newData);
              aImages = [];
              newData.linkProperty = '<a href="' + config.frontEndUrl + 'properties-detail.html?propertyId=' + newData.objectId + ' " target="_blank">' + newData.name + '</a>';
              newData.linkHost = '<a href="' + config.frontEndUrl + 'user-show.html?userId=' + newData.ownBy.objectId + ' " target="_blank">' + newData.ownBy.nickname + '</a>';
              newData.cityName = newData.city.name;
              newData.createdAt = moment(newData.createdAt).format('YYYY-MM-DD hh:mm:ss');
              newData.updatedAt = moment(newData.updatedAt).format('YYYY-MM-DD hh:mm:ss');
              if (newData['available'] === true) {
                newData.available = '<i class="fa fa-unlock text-success"></i>';
              } else {
                newData.available = '<i class="fa fa-lock text-danger"></i>';
              }
              newData.action1 = '<a href="#propertyModal" data-toggle="modal" data-obj-id="' + newData.objectId + '" class="btn_edit m-r-10"><i class="fa fa-edit text-primary"></i></a><a href="#;" data-obj-id="' + newData.objectId + '" class="btn_remove"><i class="fa fa-trash text-danger"></i></a>';
              newData.action = '刷新页面后编辑';
              if (targetTr) {
                if (newData.Status === 2) {
                  table.row(targetTr).remove().draw();
                } else {
                  table.row(targetTr).data(newData).draw();
                }
              } else {
                table.row.add(newData).draw();
              }
              if ($(that).hasClass('go_on')) {
                $('#pOwnBy').val(extraData.currentUserInfo.objectId);
                $('.property_form')[0].reset();
                $('.summernote').empty();
                $('.propertyModal input:first').focus();
                return $('#pOwnBy').val(extraData.currentUserInfo.objectId);
              } else {
                return $('#propertyModal').modal('hide');
              }
            }, function(error) {
              swal('出错了...', error.message, 'error');
              return console.log('Error: ' + error.code + ' ' + error.message);
            });
          }
        });
        return $('.btn_remove').unbind().click(function() {
          var $this;
          $this = $(this);
          return swal({
            title: "你确定需要在前台后台都隐藏该房源吗?",
            text: "数据隐藏后,你依然可以通过筛选和编辑更改这个房源的状态!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "是的,隐藏它!",
            cancelButtonText: "取消",
            closeOnConfirm: false
          }, function(isConfirm) {
            var objId, saveObj;
            if (isConfirm) {
              $('.btn_save').prop('disabled', true);
              objId = $this.data('objId');
              targetTr = $this.parent().parent();
              saveObj = {
                oData: {
                  id: objId,
                  Status: 2
                }
              };
              return Parse.Cloud.run('manage_Property', saveObj).then(function(res) {
                console.log(res.data.toJSON());
                $('.btn_save').prop('disabled', false);
                table.row(targetTr).remove().draw();
                return swal({
                  title: "隐藏成功!",
                  text: "数据隐藏后,你依然可以通过筛选和编辑更改这个房源的状态!",
                  type: "success",
                  timer: 2000,
                  showConfirmButton: false
                });
              }, function(error) {
                swal('出错了...', error.message, 'error');
                return console.log('Error: ' + error.code + ' ' + error.message);
              });
            }
          });
        });
      }, function(error) {
        return swal('出错了...', error.message, 'error');
      });
    }
  });
  */
},function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

$('.checkbox_area .tit').click(function() {
  $('.cont', this.parentNode).slideToggle();
  return $('.text', this).toggle();
});

$('.start_qiniu').click(function() {
  $('.qiniu_area').show();
  return commonFn.qiniuFn();
});

Parse.Cloud.run('manage_getCity').then(function(res) {
  console.log('manage_getCity success', res);
  $('#cityGroup').empty();
  return _(res.data.list.forEach(function(item) {
    var html;
    item = item.toJSON();
    html = "<option value='" + item.objectId + "'>" + item.name + "</option>";

    $('#filter-cityGroup').append(html);

    return $('#cityGroup').append(html);
  }));
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('manage_getPropertyRoomType').then(function(res) {
  console.log('manage_getPropertyRoomType success', res);
  $('#roomType').empty();
  return _(res.data.list.forEach(function(item) {
    var html;
    if (item.attributes.Status === 0) {
      item = item.toJSON();
      html = "<option value='" + item.objectId + "'>" + item.RoomType + "</option>";

      $('#filter-roomType').append(html);
      return $('#roomType').append(html);
    }
  }));
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('manage_getPropertyType').then(function(res) {
  console.log('manage_getPropertyType success', res);
  return _(res.data.list.forEach(function(item) {
    var html;
    if (item.attributes.Status === 0) {
      item = item.toJSON();
      html = "<option value='" + item.objectId + "'>" + item.chineseName + "</option>";

      $('#filter-propertyType').append(html);
      return $('#propertyType').append(html);
    }
  }));
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('web_getPropAmenities', {
  type: 1,
  list: true
}).then(function(res) {
  var $amenities_list, list;
  console.log('web_getPropAmenities success', res);
  $amenities_list = $('.amenities_list');
  $amenities_list.empty();
  list = [];
  _(res.data.list.forEach(function(item) {
    if (item.attributes.Status === 0) {
      return list.push(item.toJSON());
    }
  }));
  return $.each(list, function(key, val) {
    var html;
    html = '<label class="css-input css-checkbox css-checkbox-primary m-r-15"> <input type="checkbox" id="commonAmenities' + val.code + '" name="commonAmenities" value="' + val.code + '"><span></span> ' + val.name + ' </label>';
    return $amenities_list.append(html);
  });
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('web_getPropAmenities', {
  type: 2,
  list: true
}).then(function(res) {
  var $amenities_list, list;
  console.log('web_getPropAmenities success', res);
  $amenities_list = $('.surround_list');
  $amenities_list.empty();
  list = [];
  _(res.data.list.forEach(function(item) {
    if (item.attributes.Status === 0) {
      return list.push(item.toJSON());
    }
  }));
  return $.each(list, function(key, val) {
    var html, html1;
    html = '<label class="css-input css-checkbox css-checkbox-primary m-r-15"> <input type="checkbox" id="surrounding' + val.code + '" name="surrounding" value="' + val.code + '"><span></span> ' + val.name + ' </label>';
    html1 = ' <label class="checkbox-inline" for="surrounding' + val.code + '"> <input type="checkbox" id="surrounding' + val.code + '" name="surrounding" value="' + val.code + '">' + val.name + '</label> ';
    return $amenities_list.append(html);
  });
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('web_getPropAmenities', {
  type: 3,
  list: true
}).then(function(res) {
  var $amenities_list, list;
  console.log('web_getPropAmenities success', res);
  $amenities_list = $('.value_list');
  $amenities_list.empty();
  list = [];
  _(res.data.list.forEach(function(item) {
    if (item.attributes.Status === 0) {
      return list.push(item.toJSON());
    }
  }));
  return $.each(list, function(key, val) {
    var html;
    html = '<label class="css-input css-checkbox css-checkbox-primary m-r-15"> <input type="checkbox" id="valueAddedServiece' + val.code + '" name="valueAddedServiece" value="' + val.code + '"><span></span> ' + val.name + ' </label>';
    return $amenities_list.append(html);
  });
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('web_getPropAmenities', {
  type: 4,
  list: true
}).then(function(res) {
  var $amenities_list, list;
  console.log('web_getPropAmenities success', res);
  $amenities_list = $('.other_amenities_list');
  $amenities_list.empty();
  list = [];
  _(res.data.list.forEach(function(item) {
    if (item.attributes.Status === 0) {
      return list.push(item.toJSON());
    }
  }));
  return $.each(list, function(key, val) {
    var html, html1;
    html = '<label class="css-input css-checkbox css-checkbox-primary m-r-15"> <input type="checkbox" id="otherAmenities' + val.code + '" name="otherAmenities" value="' + val.code + '"><span></span> ' + val.name + ' </label>';
    html1 = ' <label class="checkbox-inline" for="otherAmenities' + val.code + '"> <input type="checkbox" id="otherAmenities' + val.code + '" name="otherAmenities" value="' + val.code + '">' + val.name + '</label> ';
    return $amenities_list.append(html);
  });
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

Parse.Cloud.run('web_getPropAmenities', {
  type: 5,
  list: true
}).then(function(res) {
  var $amenities_list, list;
  console.log('web_getPropAmenities success', res);
  $amenities_list = $('.security_list');
  $amenities_list.empty();
  list = [];
  _(res.data.list.forEach(function(item) {
    if (item.attributes.Status === 0) {
      return list.push(item.toJSON());
    }
  }));
  return $.each(list, function(key, val) {
    var html, html1;
    html = '<label class="css-input css-checkbox css-checkbox-primary m-r-15"> <input type="checkbox" id="securityAmenities' + val.code + '" name="securityAmenities" value="' + val.code + '"><span></span> ' + val.name + ' </label>';
    html1 = ' <label class="checkbox-inline" for="securityAmenities' + val.code + '"> <input type="checkbox" id="securityAmenities' + val.code + '" name="securityAmenities" value="' + val.code + '">' + val.name + '</label> ';
    return $amenities_list.append(html);
  });
}, function(error) {
  swal('出错了...', error.message, 'error');
  return console.log('Error: ' + error.code + ' ' + error.message);
});

App.initHelpers(['datepicker', 'datetimepicker', 'colorpicker', 'maxlength', 'select2', 'masked-inputs', 'rangeslider', 'tags-inputs']);

$('.property_form').validate({
  ignore: [],
  errorClass: 'help-block text-right animated fadeInDown',
  errorElement: 'div',
  errorPlacement: function(error, e) {
    jQuery(e).parents('.form-group > div').append(error);
  },
  highlight: function(e) {
    var elem;
    elem = jQuery(e);
    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
    elem.closest('.help-block').remove();
  },
  success: function(e) {
    var elem;
    elem = jQuery(e);
    elem.closest('.form-group').removeClass('has-error');
    elem.closest('.help-block').remove();
  },
  rules: {
    'oData[name]': {
      required: true,
      minlength: 2
    },
    'oData[ownBy]': {
      required: true,
      minlength: 10,
      maxlength: 10
    },
    'oData[price]': {
      required: true,
      number: true
    },
    'oData[CleanFee]': {
      number: true,
      required: true,
    },
    'oData[ServiceFee]': {
      number: true,
      required: true,
    },
    'oData[lessDays]': {
      number: true,
      required: true
    },
    'oData[bedroomCount]': {
      number: true,
      required: true,
    },
    'oData[maxGuest]': {
      number: true,
      required: true,
    },
    'oData[bedCount]': {
      number: true,
      required: true
    },
    'oData[bathroomCount]': {
      number: true,
      required: true
    },
    'oData[addr][zipCode]': {
      number: true,
    },
    'oData[deposit]':{
      number: true,
      required: true
    },
    'oData[addr][st]':{
      required: true
    },
    'oData[addr][city]':{
      required: true
    },
    'oData[tax]':{
      number: true,
      required: true
    },
    'oData[discount][weekly]':{
      number: true,
      required: true
    },
    'oData[discount][month]':{
      number: true,
      required: true
    }
  },
  messages: {
    'oData[name]': {
      required: '请输入房源名称',

      minlength: '房源名称应该至少有两个字'
    },
    'oData[ownBy]': {
      required: '必须指定一个房东的objectId'
    },
    'oData[price]': {
      required: '必须输入,且为数字'
    },
    'oData[bedroomCount]': '必须输入,且为数字',
    'oData[maxGuest]': '必须输入,且为数字',
    'oData[bedCount]': '必须输入,且为数字',
    'oData[CleanFee]': '必须输入,且为数字',
    'oData[ServiceFee]': '必须输入,且为数字',
    'oData[lessDays]': '必须输入,且为数字',
    'oData[deposit]': '必须输入,且为数字',
    'oData[addr][st]': '必须输入',
    'oData[addr][city]': '必须输入',
    'oData[tax]': '必须输入,且为数字',
    'oData[discount][weekly]': '必须输入,且为数字',
    'oData[discount][month]': '必须输入,且为数字',
  }
});

addDay = function(date, number) {
  var a;
  a = new Date(date);
  a = a.valueOf();
  a = a + number * 24 * 60 * 60 * 1000;
  a = new Date(a);
  return a;
};

Model_Time = function(date){
  var datetime = date.getTime();
  var localOffset = date.getTimezoneOffset() * 60000;
  return new Date(datetime+localOffset);
}

GMT_TO_UTC = function(dd) {

  var a;
  a = new Date(dd);
//  a = a.valueOf();
 // a = a + 8 * 60 * 60 * 1000;
  //a = new Date(a);
  localOffset =a.getTimezoneOffset() * 60000;
  localTime = a.getTime();
  utc = localTime-localOffset; //得到国际标准时间
  nd = new Date(utc);
  return nd;
};
getAutoDate = function(date){
  var hours = date.getHours();
  if(hours == 12){
    return addDay(date,-0.5);
  }
  return date;
}

// timetall = function(time1) {
//   var date, month, time, year;
//   if (time1) {
//     date = time1.getDate();
//     month = time1.getMonth();
//     month = month + 1;
//     if (month <= 9) {
//       month = '0' + month;
//     }
//     year = time1.getFullYear();
//     time = year + '-' + month + '-' + date;
//     return time;
//   }
// };

show = function(value1, value2, arr) {
  var date1, date2, getDate, res, tempDate;
  if (value2 === null) {
    value2 = value1;
  }
  getDate = function(str) {
    var list, tempDate;
    tempDate = new Date;
    list = str.split('-');
    tempDate.setFullYear(list[0]);
    tempDate.setMonth(list[1] - 1);
    tempDate.setDate(list[2]);
    return tempDate;
  };
  date1 = getDate(value1);
  date2 = getDate(value2);
  if (date1 > date2) {
    tempDate = date1;
    date1 = date2;
    date2 = tempDate;
  }
  while (!(date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate())) {
    res = date1.getFullYear() + '-' + (date1.getMonth() + 1) + '-' + date1.getDate();
    date1.setDate(date1.getDate() + 1);
    arr.push(res);
  }
  arr.push(date2.getFullYear() + '-' + (date2.getMonth() + 1) + '-' + date2.getDate());
};
$('#all').click(function() {
  swal('提示...', '是否全部清除', 'input');
  $('#calendar').fullCalendar('removeEvents');
});

$('#add').click(function() {
  var end1, enddate_, events, i, res, start1, startdate_, temp_end, temp_end_, temp_start, title1, today_date;
  start1 = $('#full_start').val();
  end1 = $('#full_end').val();
  title1 = $('#full_title').val();
  startdate_ = Model_Time(new Date(start1));
  //var utcdate = startdate_.getUTCDate();
  //var utcdate = new Date(2016,07,22);
  var date_temp = moment(start1, "YYYY-MM-DD");
  enddate_ = Model_Time(new Date(end1));
  today_date = new Date;
  if (startdate_ < today_date) {
    swal('出错了...', '起始日期不能小于当天日期！', 'error');
    return;
  }
  if (startdate_ > enddate_) {
    swal('出错了...', '起始日期不能大于结束日期！', 'error');
    return;
  }
  events = [];
  res = $('#calendar').fullCalendar('clientEvents');
  if (start1) {
    i = 0;
    while (i < res.length) {
      events.push({
        start: moment(res[i]._start._d).format('L'),
        end: moment(res[i]._end ? res[i]._end._d : res[i]._start._d).format('L')
      });
      i++;
    }
  }
  i = 0;
  while (i < events.length) {
    temp_start = new Date(events[i].start.replace(/-/g, '/'));
    temp_end_ = events[i].end ? events[i].end : events[i].start;
    temp_end = new Date(temp_end_.replace(/-/g, '/'));
    if (startdate_ >= temp_start && startdate_ <= temp_end) {
      startdate_ = temp_start;
    }
    if (enddate_ >= temp_start && enddate_ <= temp_end) {
      enddate_ = temp_end;
    }
    i++;
  }
  $('#calendar').fullCalendar('removeEvents', function(event) {
    var temp_date_end;
    temp_date_end = event.end ? event.end._d : event.start._d;
    temp_date_end = getAutoDate(temp_date_end);
    if (startdate_ <= event.start._d && enddate_ >= temp_date_end) {
      return true;
    }
    return false;
  });
  $('#calendar').fullCalendar('renderEvent', {
    title: title1,
    start: startdate_,
    end: addDay(enddate_,0.5)
  });
});
$('#full_start').datepicker().on('hide', function() {
  var dateRange1_1, lessSelect;
  dateRange1_1 = void 0;
  lessSelect = void 0;
  dateRange1_1 = $('#full_start').datepicker('getDate');
  if (dateRange1_1) {
    lessSelect = moment(dateRange1_1).add(1, 'days').format('YYYY-MM-DD');
    $('#full_end').datepicker('setDate', lessSelect);
    return $('#full_end').datepicker('show');
  }
});

// 查询过滤 =====================================================================

var filterCondition = {};

// 房源id
var $filterPropertyId = $('#filter-propertyId');
// 房源名称
var $filterPropertyName = $('#filter-propertyName');
// 房源类型
var $filterPropertyType = $('#filter-propertyType');
// 房间类型
var $filterRoomType = $('#filter-roomType');
// 入住日期
var $filterCheckin = $('#filter-checkin');
// 退房日期
var $filterCheckout = $('#filter-checkout');
// 最低价格
var $filterMaxPrice = $('#filter-maxPrice');
// 最低价格
var $filterMinPrice = $('#filter-minPrice');
// 可租用状态
var $filterAvailable = $('#filter-available');
// 城市圈
var $filterCityGroup = $('#filter-cityGroup');
// 入住人数 - 最少人数
var $filterMinGuest = $('#filter-minGuest');
// 入住人数 - 最多人数
var $filterMaxGuest = $('#filter-maxGuest');
// 根据那个字段排序
var $filterSortBy = $('#filter-sort-by');
// 可见状态
var $filterStatus = $('#filter-status');


// 启动日期选择插件
$filterCheckin.datepicker({
  language: "zh-CN",
  startDate: new Date(),
  format: "yyyy-mm-dd",
  autoclose: true
});

$filterCheckout.datepicker({
  language: "zh-CN",
  startDate: new Date(new Date().getTime() + 86400000),
  format: "yyyy-mm-dd",
  autoclose: true
});

$filterPropertyType.select2({ placeholder: "所有" });
$filterRoomType.select2({ placeholder: "所有" });
$filterCityGroup.select2({ placeholder: "所有" });

// 提交查询
$('#filter-search').submit(function() {

  var filter = {
    page: 0,
    limit: 20,
    propertyId: $filterPropertyId.val(),
    propertyName: $filterPropertyName.val(),
    propertyType: $filterPropertyType.val(),
    roomType: $filterRoomType.val(),
    checkin: $filterCheckin.val(),
    checkout: $filterCheckout.val(),
    maxPrice: Math.round($filterMaxPrice.val()*10)/10,
    minPrice: Math.round($filterMinPrice.val()*10)/10,
    available: $filterAvailable.val(),
    cityGroup: $filterCityGroup.val(),
    minGuest: $filterMinGuest.val(),
    maxGuest: $filterMaxGuest.val(),
    available: $filterAvailable.val() > 0 ? ($filterAvailable.val() == 1 ? true : false) : null,
    sortBy: $filterSortBy.val(),
    status: $filterStatus.val()
  };

  renderPropertiesView(filter);

  return false;
});


// 执行搜索
var handleSearch = function(filterCondition, callback) {

  // 查询数据基础结构
  var searchProp = {
    oData: {},
    oOption: {
      nSkip: filterCondition.page * filterCondition.limit,
      nLimit: filterCondition.limit,
      max: {},
      min: {}
    }
  };

  // 对象id
  if (filterCondition.propertyId) {
    searchProp.oData.objectId = filterCondition.propertyId;
  }

  // 房源类型
  if (filterCondition.propertyType) {
    searchProp.oData.propertyType = filterCondition.propertyType;
  }

  // 房间类型
  if (filterCondition.roomType) {
    searchProp.oData.roomType = filterCondition.roomType;
  }

  // 城市圈
  if (filterCondition.cityGroup) {
    searchProp.oData.city = filterCondition.cityGroup;
  }

  // 入住日期
  if (filterCondition.checkin) {
    searchProp.oData.startDate = filterCondition.checkin;
  }

  // 退房日期
  if (filterCondition.checkout) {
    searchProp.oData.endDate = filterCondition.checkout;
  }

  // 最少接待房客
  if (filterCondition.minGuest) {
    searchProp.oOption.min.maxGuest = filterCondition.minGuest;
  }

  // 最多接待房客
  if (filterCondition.maxGuest) {
    searchProp.oOption.max.maxGuest = filterCondition.maxGuest;
  }

  // 通过房源名称模糊查询
  if (filterCondition.propertyName) {
    searchProp.oData.name = filterCondition.propertyName;
  }

  // 是否可租用
  if (filterCondition.available != null) {
    searchProp.oData.available = filterCondition.available;
  }

  // 最低价格
  if (filterCondition.minPrice) {
    searchProp.oOption.min.price = filterCondition.minPrice;
  }

  // 最高价格
  if (filterCondition.maxPrice) {
    searchProp.oOption.max.price = filterCondition.maxPrice;
  }

  // 通过房东id搜索房源
  if (filterCondition.ownBy) {
    searchProp.oData.ownBy = filterCondition.ownBy;
  }

  // 根据某个字段排序
  if (filterCondition.sortBy) {
    searchProp.oOption.sortBy = filterCondition.sortBy;
  }

  // 可见状态
  if (filterCondition.status) {
    searchProp.oData.Status = parseInt(filterCondition.status);
  }

  console.log('搜索条件：', searchProp);

  Parse.Cloud.run('web_searchProp', searchProp).then(function(res) {
    callback(null, res);
    console.log('结果条目数：', res.data.count);
    console.log('搜索结果：', res);

    /*
    res.data.list.forEach(function(v){
      console.log(v.name)
    })
    */

  }, function(error) {
    callback(error.message);
  });

};

renderPropertiesView({
  page: 0,
  limit: 25,
  sortBy: 'createdAt'
});
